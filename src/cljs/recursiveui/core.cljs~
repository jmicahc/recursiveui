(ns recursiveui.core
  (:require [reagent.core :as reagent]
            [recursiveui.data :as data]
            [recursiveui.event :as event]
            [recursiveui.command :as command
             :refer [resize-grid]]
            [cljs.core.async :refer [chan <! >! take! mult put!]]))



(defonce debug?
  ^boolean js/goog.DEBUG)


(def base-element [:div {}])


(defn attrs
  ([k v & kvs]
   (fn [elem]
     (apply update elem 1 assoc k v kvs))))


(defn style [k v & kvs]
  (fn [elem]
    (apply update-in elem [1 :style] assoc k v kvs)))


(defn tag [name]
  (fn [elem]
    (assoc elem 0 name)))


(defn html [s]
  (fn [elem]
    (conj elem s)))



(defn style-element
  "temporary"
  [{:keys [style/backgroundColor]}]
  (style :backgroundColor backgroundColor))



(defn layout-row
  [{:keys [layout/magnitude]}]
  (style :height magnitude
         :display "flex"
         :flexDiretion "row"))


(defn layout-column
  [{:keys [layout/magnitude]}]
  (style :width magnitude
         :display "flex"
         :flexDirection "column"))


(defn layout-root
  [{:keys [style/width style/height
           style/top  style/left
           style/flex-direction]}]
  (style :width width
         :height height
         :top top
         :left left
         :dipslay "flex"
         :position "absolute"
         :flexDirection flex-direction))



(defn tag->fn [tag]
  (case tag
    :layout/root   layout-root
    :layout/row    layout-row
    :layout/column layout-column
    :style/root    style-element
    :event/root    event/test-event))



(defn render
  ([{:keys [tags children path] :as node}]
   (let [f (transduce (comp (map #((tag->fn %) node)))
                      comp
                      tags)]
     (into (f base-element)
           (map render children)))))


(defn dev-setup []
  (when debug?
    (enable-console-print!)
    (println "dev mode")))


(defn root-component [state]
  (fn [] [:div {:id "root-elem"} (render @state)]))




(defn reload []
  (reagent/render [root-component data/state]
                  (.getElementById js/document "app")))



(defn ^:export main []
  (dev-setup)
  (swap! data/state command/init-paths)
  (reload))
